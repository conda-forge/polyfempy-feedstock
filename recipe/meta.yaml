{% set name = "polyfempy" %}
{% set version = "0.5" %}

package:
  name: {{ name|lower }}
  version: {{ version }}


source:
  url: https://github.com/polyfem/polyfem-python/archive/{{ version }}.tar.gz
  sha256: bf0a67fa0f0bce54030780d3dc6cd99ed5bf64632f388dbb011d3d1bb0addcbe

build:
  number: 0
  skip: True  # [py<31]
  script:
    - "{{ PYTHON }} -m pip install . --no-deps -vv"

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - cmake
    - make
  host:
    - python
    - pip
    - libblas
    - libcblas
    - numpy
    - suitesparse  # [not ppc64le and not aarch64 and not win]
  run:
    - python
    - {{ pin_compatible('numpy') }}
    - suitesparse  # [not ppc64le and not aarch64 and not win]

test:
  imports:
    - polyfempy

about:
  home: https://polyfem.github.io/

  license: MIT
  license_family: MIT
  license_file: LICENSE.txt

  summary: 'Easy-to-use powerfull finite element library based on Polyfem'

  description: |
    PolyFEM is a simple C++ and Python finite element library. We provide a wide set of common PDEs including:
    - Laplace
    - Helmholtz
    - Linear Elasticity
    - Saint-Venant Elasticity
    - Neo-Hookean Elasticity
    - Stokes

    PolyFEM simplicity lies on the interface: just pick a problem, select some boundary condition, and solve.
    No need to construct complicated function spaces, or learn a new scripting language: everything is set-up trough a the Setting python class.
    For instance, PolyFEM seamlessly integrates quad/hexes and tri/tets of order up to 4, and integrate state-of-the-art techniques such as the adaptive p-refinement.
    The library is actively used in our research so expect frequent updates, fixes, and new features!
  doc_url: https://polyfem.github.io/
  dev_url: https://github.com/polyfem/polyfem-python

extra:
  recipe-maintainers:
    - teseoch
